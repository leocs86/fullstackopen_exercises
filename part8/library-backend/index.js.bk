const { ApolloServer } = require("@apollo/server");
const { startStandaloneServer } = require("@apollo/server/standalone");

const User = require("./models/user");
const jwt = require("jsonwebtoken");

const resolvers = require("./resolvers.js");
const typeDefs = require("./typeDefs.js");

const mongoose = require("mongoose");
mongoose.set("strictQuery", false);

require("dotenv").config();

const MONGODB_URI = process.env.MONGODB_URI;

console.log("connecting to", MONGODB_URI);

mongoose
    .connect(MONGODB_URI)
    .then(() => {
        console.log("connected to MongoDB");
    })
    .catch((error) => {
        console.log("error connection to MongoDB:", error.message);
    });

const server = new ApolloServer({
    typeDefs,
    resolvers,
});

startStandaloneServer(server, {
    listen: { port: 4000 },

    context: async ({ req, res }) => {
        try {
            const auth = req ? req.headers.authorization : null;
            if (auth && auth.startsWith("Bearer ")) {
                const decodedToken = jwt.verify(
                    auth.substring(7),
                    process.env.SECRET
                );
                const currentUser = await User.findById(decodedToken.id);
                return { currentUser };
            }
        } catch (err) {
            //if jwt can't decode token
            return null;
        }
    },
}).then(({ url }) => {
    console.log(`Server ready at ${url}`);
});
